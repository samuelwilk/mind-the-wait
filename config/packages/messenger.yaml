framework:
    messenger:
        failure_transport: failed

        transports:
            sync: 'sync://'
            async:
                dsn: '%env(MESSENGER_TRANSPORT_DSN)%'
                options:
                    auto_setup: true
                    delete_after_ack: true
                    stream_max_entries: 0
                # (Redis transport) keep defaults; add only Redis-specific options if needed
                retry_strategy:
                    max_retries: 5
                    multiplier: 2.0
                    max_delay: 60000

            failed: 'doctrine://default?queue_name=failed'

        default_bus: messenger.bus.default
        buses:
            messenger.bus.default: ~

        routing:
            # Route framework messages to the in-process (synchronous) transport.
            # This avoids needing a background worker while keeping features functional.
            Symfony\Component\Mailer\Messenger\SendEmailMessage: sync   # send emails inline (no queue)
            Symfony\Component\Notifier\Message\ChatMessage: sync        # send chat notifications inline
            Symfony\Component\Notifier\Message\SmsMessage: sync         # send SMS inline

            # Our app messages: handle immediately to keep dev stack simple.
            # If/when these become heavy, switch to "async" and run a worker.
            App\Message\ProcessSnapshot: sync                         # lightweight; safe to run inline
            # App\Message\PollGtfs: 'sync://' # only if still dispatched anywhere

            # Scheduled messages (processed by scheduler service via Redis queue)
            App\Scheduler\WeatherCollectionMessage: async             # hourly weather collection
            App\Scheduler\ScoreTickMessage: async                     # headway scoring every 30s
            App\Scheduler\InsightCacheWarmingMessage: async           # AI insights nightly at 2 AM
            App\Scheduler\ArrivalLoggingMessage: async                # arrival predictions every 2min
            App\Scheduler\BunchingDetectionMessage: async             # bunching detection
